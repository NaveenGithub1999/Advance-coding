
question: - Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once.
********************************************************************************************************************************************************
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        #create a martix to traverse
        ROW,COLS = len(board),len(board[0])
        path = set()
    #create a dfs for each of the position for each element in the word
        def dfs(r,c,i):
            if i==len(word):
                return True
            if (r<0 or c<0 or r>=ROW or c>=COLS or word[i]!=board[r][c] or (r,c) in path):
                return False
            path.add((r,c))
    #traversing through each of the position L R U D
            res = (dfs(r+1,c,i+1) or
                    dfs(r-1,c,i+1) or
                    dfs(r,c+1,i+1) or
                    dfs(r,c-1,i+1))
    #after adding in path set remove the value again
            path.remove((r,c))
            return res
    #traversing for each element in the board
        for r in range(ROW):
            for c in range(COLS):
                if dfs(r,c,0):
                    return True
        return False
